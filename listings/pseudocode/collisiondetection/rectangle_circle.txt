structure Point:
    // Rewritten as a memo
    Integer x
    Integer y

structure Rectangle:
    // Let's define a rectangle class/structure
    Point corner
    Integer width
    Integer height

structure Circle:
    // Let's define a circle class/structure
    Point center;
    Integer radius

function circle_rectangle_collision(Circle circ, Rectangle rect):
    // Detects a collision between a circle and a rectangle

    // These variables are used as the coordinates we should test against
    // They are temporarily set to the circle center's coordinates for a reason we'll see soon
    Integer tx = circ.center.x
    Integer ty = circ.center.y

    // Let's detect which edge to test against on the x axis
    if (circ.center.x < rect.corner.x):
        // We're at the left of the rectangle, test against the left side
        tx = rect.corner.x
    else if (circ.center.x > rect.corner.x + rect.width):
        // We're at the right of the rectangle, test against the right side
        tx = rect.corner.y + rect.width

    // Same thing on the vertical axis
    if (circ.center.y < rect.corner.y):
        // We're above the rectangle, test against the top side
        ty = rect.corner.y
    else if (circ.center.y > rect.corner.y + rect.height):
        // We're below the rectangle, test against the bottom side
        ty = rect.corner.y + rect.height

    // Let's get the distance between the testing coordinates and the circle center
    Integer distanceX = circ.center.x - tx
    Integer distanceY = circ.center.y - ty
    Float distance = square_root(distanceX^2 + distanceY^2)

    // Note that if the center of the circle is inside the rectangle, the testing coordinates will be the circle's center itself, thus the next conditional will always return true

    if (distance <= circ.radius):
        return True

    // Default to false in case no collision occurs
    return False
