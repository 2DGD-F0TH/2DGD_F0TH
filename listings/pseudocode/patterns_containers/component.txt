abstract class Component{
    // Defines the abstract class/interface for the component pattern
    function update():
        // Do nothing, this is an abstract class
}

class ConcreteComponent1 inherits from Component{
    // Defines the concrete component number 1
    function update():
        // Do Stuff
}

class ConcreteComponent2 inherits from Component{
    // Defines the concrete component number 2

    // The component can contain a list of other components that get updated
    Component[] list = new vector of 9 Component
    function update():
        for each component comp in list:
            comp.update()

        // Do Other Stuff
}

class Client{
    ConcreteComponent1 first_component;
    ConcreteComponent2 second_component;

    function update():
        // This is the Client's update function
        first_component.update();
        second_component.update();
}
