#include <cmath>
struct Point{
    int x;
    int y;
};

struct Line{
    Point A;
    Point B;
};

struct Circle{
    Point center;
    int radius;
};

float distance(Point A, Point B){
    // Calculates the distance between two points
    return std::sqrt(std::pow((A.x + B.x),2) + std::pow((A.y + B.y),2));
}

bool line_point_collision(Line l, Point p){
    // ...
}

bool circle_point_collision(Circle c, Point p){
    // ...
}

bool line_circle_collision(Circle circle, Line line):
    // We check the ends first
    collides_A = circle_point_collision(circle, line.A);
    collides_B = circle_point_collision(circle, line.B);
    if (collides_A || collides_B){
        return true;
    }
    // We pre-calculate "u", we'll use some variables for readability
    int x1 = line.A.x;
    int x2 = line.B.x;
    int xk = circle.center.x;
    int y1 = line.A.y;
    int y2 = line.B.y;
    int yk = circle.center.y;
    float u = ((xk - x1) * (x2 - x1) + (yk - y1) * (y2 - y1))/pow((distance(line.A, line.B)),2);
    // Now let's calculate the x and y coordinates
    float x = x1 + u * (x2 - x1);
    float y = y1 + u * (y2 - y1);
    // "Reuse", we'll use some older functions, let's create a point, with the coordinates we found
    Point P;
    P.x = x;
    P.y = y;
    // Let's check if the "closest point" we found is on the line
    if (!line_point_collision(line, P)){
        // If the point is outside the line, we return false, because the ends have already been checked against collisions
        return false;
    }else{
        // Let's Reuse the Point/Circle Algorithm
        return circle_point_collision(circle, P);
    }
