class Component{
    // Defines the abstract class/interface for the component pattern
    public:
        // Do nothing, this is an abstract class
        virtual void update() = 0;
};

class ConcreteComponent1: public Component{
    // Defines the concrete component number 1
    public:
        void update(){
            // Do Stuff
        }
};

class ConcreteComponent2: public Component{
    // Defines the concrete component number 2

    // The component can contain a list of other components that get updated
    private:
        Component[] list = {...};

    public:
        void update(){
            for(auto comp:list){
                comp.update();
            }
            // Do Other Stuff
        }
};

class Client{
    ConcreteComponent1 first_component* = new ConcreteComponent1();
    ConcreteComponent2 second_component* = new ConcreteComponent2();

    function update(){
        // This is the Client's update function
        first_component->update();
        second_component->update();
    }
};
