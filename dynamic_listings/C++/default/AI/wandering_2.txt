#include <vector>

template <typename T>
T get_random(const std::vector<T> &vect){
    // Gets a random item from a Vector
    auto it = vect.begin();
    // C++ rand() will do for this
    int random = rand() % vect.size();
    // Let's return the item via pointer arithmetics
    return *(it + random);
}

// ...

const std::vector<std::String> DIRECTIONS = {"NORTH", "EAST", "SOUTH", "WEST"};

class AIEntity{
    private:
        // 0=North, 1=East, ...
        int forward_direction_index = 0;
        Cell current_cell = new Cell(1,0);
    // ...
    public:
        Cell get_adjacent_cell(Cell cell, std::String direction){
            // Returns the adjacent cell in said direction
            cell_copy = cell.copy();
            if (direction == "NORTH"){
                cell_copy.y -= 1;
            }
            if (direction == "SOUTH"){
                cell_copy.y += 1;
            }
            if (direction == "WEST"){
                cell_copy.x -= 1;
            }
            if (direction == "EAST"){
                cell_copy.x += 1;
            }
            return cell_copy;
        }

        bool is_valid(Cell cell){
            /* Returns true if the cell is valid, aka
             * does not have a wall and does not go backwards */
            if (cell.is_wall()){
                // The cell is a wall
                return false;
            }
            if (cell == get_adjacent_cell([(forward_direction_index + 2) % 4])){
                // We're going backwards, we don't want that
                return false;
            }
            // In all other cases, it's valid
            return true;
        }

        std::vector<std::String> get_available_directions(Cell cell){
            /* Returns a list of available directions */
            std::vector<std::String> result = {};
            for (auto direction: DIRECTIONS){
                if (is_valid(get_adjacent_cell(cell, direction))){
                    result.push_back(direction);
                }
            }
            return result;
        }

        void update(float dt){
            // ...
            // Get a list of the available directions
            std::vector<std::String> available_directions = get_available_directions(current_cell);
            std::string chosen_direction = "NORTH";  // Just a default
            if (available_directions.is_empty()){
                // No directions are available, let's go back
                chosen_direction = DIRECTIONS[(forward_direction_index + 2) % 4];
            }else{
                // Choose a random direction among the available ones
                chosen_direction = get_random<std::String>(available_directions);
            }
            // Move
            Cell next_cell = get_adjacent_cell(current_cell, chosen_direction);
            move_to(next_cell);
        }
};
