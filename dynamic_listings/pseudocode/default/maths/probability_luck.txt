// Our probabilities, from least to most common
List pool = [
    "EPIC": 5,
    "RARE": 15,
    "UNCOMMON": 30,
    "COMMON": 50,
]

// Our "luck stat": each point gives 1% more chance to get a higher-tier item
int LUCK = 25;

// We cap the Luck stat at 100, the limit is 100% epic items
LUCK = min(LUCK, 100);

// We "overload" the prize pool, making the sum go over 100%
List overloaded_pool = new List();

for each item, probability in pool:
    append the pair "item: probability + LUCK" to the overloaded pool

// We calculate how much we "overloaded" the prize pool
int overload_factor = sum(probabilities in overloaded_pool) - 100;

// We rebalance the prizes to a total of 100, from most to least common
List rebalanced_pool = new List();
// We need to start from the most common, which means we will iterate backwards
for each item, probability in overloaded_pool, going backwards{
    // This will be modified later, if the pool is "overloaded"
    int new_probability = probability;
    // If the prize pool is still "overloaded"
    if (overload_factor > 0){
        // We calculate a "discharge factor" of sorts
        int value_to_remove = min(probability, overload_factor);
        // We reduce our "overload"
        int overload_factor = overload_factor - value_to_remove;
        // And put the new probability for the class
        new_probability = probability - value_to_remove;
    }
    // We append the new pool item
    append the pair "item: new_probability" to the rebalanced_pool;
}
