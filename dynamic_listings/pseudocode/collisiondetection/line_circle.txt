structure Point{
    int x;
    int y;
}

structure Line{
    Point A;
    Point B;
}

structure Circle{
    Point center;
    int radius;
}

function distance(Point A, Point B) -> float{
    // Calculates the distance between two points
    return square_root((A.x + B.x)^2 + (A.y + B.y)^2);
}

function line_point_collision(Line line, Point point) -> bool{
    // ...
}

function circle_point_collision(Circle circ, Point point) -> bool{
    // ...
}

function line_circle_collision(Circle circle, Line line) -> bool{
    // We check the ends first
    bool collides_A = circle_point_collision(circle, line.A);
    bool collides_B = circle_point_collision(circle, line.B);
    if (collides_A OR collides_B){
        return True;
    }
    // We pre-calculate "u", we'll use some variables for readability
    int x1 = line.A.x;
    int x2 = line.B.x;
    int xk = circle.center.x;
    int y1 = line.A.y;
    int y2 = line.B.y;
    int yk = circle.center.y;
    float u = ((xk - x1) * (x2 - x1) + (yk - y1) * (y2 - y1))/(distance(line.A, line.B))^2;
    // Now let's calculate the x and y coordinates
    float x = x1 + u * (x2 - x1);
    float y = y1 + u * (y2 - y1);
    // "Reuse": we'll use some older functions, let's create a point, with the coordinates we found
    Point P = Point(x,y);
    // Let's check if the "closest point" we found is on the line
    if ((line_point_collision(line, P)) == False){
        // If the point is outside the line, we return false, because the ends have already been checked against collisions
        return False
    }else{
        // Let's Reuse the Point/Circle Algorithm
        return circle_point_collision(circle, P);
    }
}
